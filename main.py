from caesar_cipher import caesar_enc, caesar_dec
from vigenere_cipher import vigenere_decrypt, vigenere_encr
from one_time_pad_cipher import one_time_pad_encr, one_time_pad_decr

""" 
This is the Get mode choice Function. 
This function directs users to the workflow for encrypt or decrypt and takes information in about what cipher is going to
be used.

Input: the mode they would like to use (encrypt or decrypt)
Output: the encrypted or decrypted message
        If there is an issue then the user will be reprompted for correct information and the function will run again

"""
def get_mode_choice(mode_type):
    if mode_type == "E":
        print("Please enter 1 for the caesar cipher, 2 for vigenere, and 3 for one time pad.")
        cipher_type = input()
        encrypted_message = get_choice_encrypt(cipher_type) 
        return encrypted_message
    elif mode_type == "D":
        print("Please enter 1 for the caesar cipher, 2 for vigenere, and 3 for one time pad.")
        cipher_type = input()
        print("Enter the message you would like to decrypt.")
        message_decrypt = input()
        print("Enter the key")
        key_decrypt = input()
        decrypt_message = get_choice_decrypt(cipher_type, message_decrypt, key_decrypt)
        return decrypt_message
    else:
        print("Please write a valid input E or D.")
        mode_type= input()
        get_mode_choice(mode_type)

#TODO ciphertexts need to be saved to a FILE as well
""" 
This is the Get mode choice encrypt function. 
This function directs users to the workflow for the cipher that they want to use and takes in the necessary
input.

Input: the cipher they would like to use 
Output: the encrypted message is returned to get mode choice
    
"""
def get_choice_encrypt(cipher_type):
    if cipher_type == "1":
        print("Enter the message you would like to encrypt.")
        message_input = input()
        print("Enter letter you would like to use for key.")
        letter = input()
        caesar_string = caesar_enc(message_input, letter)
        return caesar_string
    elif cipher_type == "2":
        print("Enter the message you would like to encrypt.")
        message_input = input()
        print("Enter the key you want to use")
        vigenere_key = input()
        vigenere_message= vigenere_encr(message_input, vigenere_key)
        return vigenere_message
    elif cipher_type == "3":
        print("Enter the message you would like to encrypt.")
        message_input = input()
        print("Enter the key you want to use")
        one_pad_key = input()
        one_pad_string = one_time_pad_encr(message_input, one_pad_key) 
        return one_pad_string
    else:
        print("Please write a valid input, 1, 2 or 3.")
        cipher_type = input()
        get_choice_encrypt()

""" 
This is the Get choice decrypt function. 
This function directs users to the workflow for the cipher that they want to use and takes in the necessary
input.

Input: the cipher, message to decrypt and the key that will be used 
Output: the encrypted message is returned to get mode choice
    
"""
def get_choice_decrypt(cipher_type, message_decrypt, key_decrypt):
    if cipher_type == "1":
        caesar_string = caesar_dec(message_decrypt, key_decrypt)
        return caesar_string
    elif cipher_type == "2":
        vigenere_string = vigenere_decrypt(message_decrypt, key_decrypt)
        return vigenere_string
    elif cipher_type == "3":
        one_pad_string = one_time_pad_decr(message_decrypt, key_decrypt) 
        return one_pad_string
    else:
        print("Please write a valid input, 1, 2 or 3.")
        cipher_type = input()
        get_choice_encrypt()

#TODO defined in other files (vigenere and one time pad ciphers)
"""
Converts a string to a list
Input: a string
Output: the list of capitalized characters
        If the input has an unacceptable character, it will return None
"""
def convertToList(string):
    message = []
    for k in range(len(string)):
        if string[k] == " ":                                             # If the message is a space
            message.append(" ")
        elif ord(string[k]) > 96 and ord(string[k]) < 123:         # If the message is lower case 
            message.append(string[k].upper())
        elif ord(string[k]) > 64 and ord(string[k]) < 91:         # If the message is in upper case
            message.append(string[k])
        else:
            return None
    return message

#TODO defined in other file (vIigenere)
""" 
This is the space handler function. 
This function handles the alphabet that is provided and takes care of spaces.

Input: a char
Output: the asci value of the char input
    
"""
def space_handler(char):
    if (char == ' '):
        return 26    
    else:
        return ord(char) - ord('A')

#TODO defined in other file (vigenere)
""" 
This is the reverse space function. 
This function takes in character and handles the ascii value that is generated by spaces.

Input: character
Output: the number ascii value
    
"""
def reverse_space(char):
    if (char == '['):
        return 91    
    else:
        return ord(char) - ord('A')

#TODO needs to be put back in to run program framework
#TODO - is this resolved now?

if __name__ == "__main__":
    print("Welcome to our encryption and decryption program! Enter E to encryt and D to decrypt.")
    mode_type = input()
    secret_message = get_mode_choice(mode_type)
    print(secret_message)


